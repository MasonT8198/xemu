name: Build

on:
  push:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/build.yml'
      - 'README.md'
      - 'ubuntu-win64-cross/**'
  pull_request:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/build.yml'
      - 'README.md'
      - 'ubuntu-win64-cross/**'

jobs:
  Init:
    name: Create source package
    runs-on: ubuntu-latest
    steps:
    - name: Clone tree
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install dependencies
      run: sudo apt-get install meson
    # On push to master, increment patch version and create a new tag on release
    - name: Increment patch version
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        git config user.name "nobody"
        git config user.email "nobody@nowhere"
        VERSION=$(git describe --tags --match 'v*' --abbrev=0 | xargs ./scripts/increment-semver.py)
        git tag -a $VERSION -m $VERSION
        echo "Generated new release version: $VERSION"
    # GitHub treats the new tag as lightweight, so older tags will shadow the
    # new tag. Recreate it as an annotated tag now so the version script picks
    # it up properly.
    - name: Annotate release tag
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        git config user.name "nobody"
        git config user.email "nobody@nowhere"
        VERSION=${GITHUB_REF/refs\/tags\//}
        git tag -a -f $VERSION $VERSION -m $VERSION
        echo "Recreated release tag: $VERSION"
    - name: Create source package
      run: |
        ./scripts/archive-source.sh src.tar
        gzip -1 src.tar
    - name: Upload source package artifact
      uses: actions/upload-artifact@v4
      with:
        name: src.tar.gz
        path: src.tar.gz


  Ubuntu:
    name: Build for Ubuntu (${{matrix.arch}}, ${{ matrix.configuration }})
    runs-on: ${{ matrix.runs-on }}
    needs: Init
    strategy:
      matrix:
        include:
        - arch: x86_64
          configuration: Debug
          build_param: --debug
          artifact_name: xemu-ubuntu-x86_64-debug
          artifact_filename: xemu-ubuntu-x86_64-debug.tgz
          runs-on: ubuntu-24.04
        - arch: x86_64
          configuration: Release
          build_param:
          artifact_name: xemu-ubuntu-x86_64-release
          artifact_filename: xemu-ubuntu-x86_64-release.tgz
          runs-on: ubuntu-24.04
    steps:
    - name: Initialize compiler cache
      id: cache
      uses: actions/cache@v4
      with:
        path: /tmp/xemu-ccache
        key: cache-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.configuration }}-${{ github.sha }}
        restore-keys: cache-${{ runner.os }}-${{ matrix.arch }}-${{ matrix.configuration }}-
    - name: Download source package
      uses: actions/download-artifact@v4
      with:
        name: src.tar.gz
    - name: Extract source package
      run: |
        mkdir src
        tar -C src -xf src.tar.gz
    - name: Create debian changelog
      run: |
        pushd src
        echo -e "\
        xemu (1:0.0.0-0) unstable; urgency=medium\n\
          Built from $(cat XEMU_VERSION)\n\
         -- Matt Borgerson <contact@mborgerson.com>  $(date -R)" > debian/changelog
        popd
    - name: Install dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -qy update
        sudo apt-get install ccache libfuse2
        pushd src
        sudo apt-get -qy build-dep .
    - name: Install SDL3
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git
        git clone https://github.com/libsdl-org/SDL.git
        cd SDL
        mkdir build && cd build
        cmake -S .. -B .
        make -j$(nproc)
        sudo make install
    - name: Cache SDL3 Build
      uses: actions/cache@v3
      with:
        path: /usr/local/lib
        key: ${{ runner.os }}-sdl3
        restore-keys: |
          ${{ runner.os }}-sdl3
    
    - name: Compile
      run: |
        export CCACHE_DIR=/tmp/xemu-ccache
        export CCACHE_MAXSIZE=512M
        export PATH="/usr/lib/ccache:$PATH"
        export XEMU_BUILD_OPTIONS="${{ matrix.build_param }}"
        ccache -z

        # XXX: dpkg-genbuildinfo takes two minutes on GH runners. Nuke it for now.
        sudo rm /usr/bin/dpkg-genbuildinfo
        sudo ln -s /bin/true /usr/bin/dpkg-genbuildinfo

        pushd src
        dpkg-buildpackage --no-sign -b
        popd

        mkdir -p dist
        mv *.deb *.ddeb dist

        echo -e "\n\nCompiler Cache Stats:"
        ccache -s
    - name: Generate AppImage
      run: |
        wget --no-verbose https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-${{ matrix.arch }}.AppImage
        chmod +x linuxdeploy-${{ matrix.arch }}.AppImage

        ar x dist/*.deb
        mkdir appimage
        tar -C appimage -xf data.tar*
        install -DT src/xemu.metainfo.xml appimage/usr/share/metainfo/xemu.metainfo.xml

        export VERSION=v$(cat src/XEMU_VERSION)
        if [[ "${{ matrix.configuration }}" == "Debug" ]]; then
          export VERSION=$VERSION-dbg
        fi

        ./linuxdeploy-${{ matrix.arch }}.AppImage --output appimage --appdir appimage
        mv xemu-*.AppImage dist
    - name: Bundle artifacts
      run: |
        tar -czvf ${{ matrix.artifact_filename }} --transform "s#^dist#xemu#" dist
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_filename }}
